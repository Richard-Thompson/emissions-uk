{"version":3,"sources":["utils/timeDescriptions.js","components/CityCard/index.jsx"],"names":["timeDescriptions","measurements","latestDatesList","map","measurement","moment","lastUpdated","time","details","duration","diff","data","years","concat","months","days","Math","floor","hours","e","timeDescription","max","CityCard","_ref","city","onClick","react_default","a","createElement","className","console","log","react_fontawesome_index_es","icon","faTimes","location","i","parameter","value","length"],"mappings":"6JAEeA,EAAA,SAASC,GACpB,IAAMC,EAAkBD,EAAaE,IAAI,SAACC,GACtC,OAAOC,IAAOD,EAAYE,eAK5B,OAIN,SAA0BC,GACtB,IACI,IAAMC,EAAUH,IAAOI,SAASJ,MAASK,KAAKH,IACxCI,EAAOH,EAAO,MACpB,OAAIG,EAAKC,MACL,WAAAC,OAAkBF,EAAKC,MAAvB,cAEAD,EAAKG,OACL,WAAAD,OAAkBF,EAAKG,OAAvB,eAEc,IAAdH,EAAKI,KACL,qBAEAJ,EAAKI,KAAO,EACZ,WAAAF,OAAkBG,KAAKC,MAAMN,EAAKI,KAAK,GAAvC,cAEc,IAAdJ,EAAKI,KACL,WAAAF,OAAkBF,EAAKI,KAAvB,YAEAJ,EAAKI,KAAO,GAAmB,IAAdJ,EAAKI,KACtB,WAAAF,OAAkBF,EAAKI,KAAvB,aAEe,IAAfJ,EAAKO,MACL,WAAAL,OAAkBF,EAAKO,MAAvB,aAEAP,EAAKO,MACL,WAAAL,OAAkBF,EAAKO,MAAvB,cAGG,KAGX,MAAOC,GACH,OAAO,MArCFC,CAFYf,IAAOgB,IAAInB,kCC2BrBoB,UA3BE,SAAAC,GAAqB,IAAnBC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,QACrB,MAAO,CACHC,EAAAC,EAAAC,cAAA,UACIC,UAAU,kBACVJ,QAAS,WAAQK,QAAQC,IAAIP,EAAKA,MAAOC,EAAQD,EAAKA,QAEtDE,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAiBC,KAAMC,OAE3BR,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oCACRvB,EAAYkB,EAAKvB,eAEtByB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,2CACTL,EAAKW,UAEVT,EAAAC,EAAAC,cAAA,KAAGC,UAAU,0CAAb,MACQL,EAAKA,KADb,oBAGAE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yCAAb,WACaL,EAAKvB,aAAaE,IAAI,SAACC,EAAagC,GACzC,SAAAvB,OACOT,EAAYiC,UADnB,MAAAxB,OACiCT,EAAYkC,OAD7CzB,OACqDW,EAAKvB,aAAasC,OAAQ,IAAMH,EAAI,GAAK,IAD9F","file":"static/js/4.bcddfd9e.chunk.js","sourcesContent":["import moment from 'moment';\n\nexport default function(measurements) {\n    const latestDatesList = measurements.map((measurement) => {\n        return moment(measurement.lastUpdated);\n    })\n\n    const latestMoment = moment.max(latestDatesList)\n\n      return timeDescription(latestMoment);\n\n};\n\nfunction timeDescription (time) {\n    try {\n        const details = moment.duration(moment().diff(time));\n        const data = details['_data']\n        if (data.years) {\n            return `Updated ${data.years} years ago`;\n        }\n        if (data.months) {\n            return `Updated ${data.months} months ago`;\n        }\n        if (data.days === 7) {\n            return `Updated a week ago`;\n        }\n        if (data.days > 7) {\n            return `Updated ${Math.floor(data.days/7)} weeks ago`;\n        }\n        if (data.days === 1) {\n            return `Updated ${data.days} day ago`;\n        }\n        if (data.days < 7 && data.days !== 0) {\n            return `Updated ${data.days} days ago`;\n        }\n        if (data.hours === 1) {\n            return `Updated ${data.hours} hour ago`;\n        }\n        if (data.hours) {\n            return `Updated ${data.hours} hours ago`;\n        }\n\n        return null;\n\n    }\n    catch (e){\n        return null;\n    }\n    \n}","import React from 'react';\nimport lastUpdated from '../../utils/timeDescriptions';\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport'./styles.css';\n\n\nconst CityCard = ({city, onClick}) => {\n    return [\n        <button\n            className='city-card-cross'\n            onClick={() => { console.log(city.city); onClick(city.city)} }\n        >\n            <FontAwesomeIcon icon={faTimes} />\n        </button>,\n        <p className='city-card-updated city-card-item'> \n            {lastUpdated(city.measurements)}\n        </p>,\n        <h2 className='city-card-location-title city-card-item'>\n            {city.location}\n        </h2>,\n        <p className='city-card-location-city city-card-item'> \n            In {city.city}, United Kingdom\n        </p>,\n        <p className='city-card-measurements city-card-item'> \n            Values: {city.measurements.map((measurement, i) => {\n                return(\n                    `${measurement.parameter}: ${measurement.value}${city.measurements.length -1 === i ? '' : ','} `\n                )\n            })}\n        </p>\n    ]\n}\n\nexport default CityCard;"],"sourceRoot":""}