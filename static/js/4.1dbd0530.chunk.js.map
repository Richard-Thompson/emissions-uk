{"version":3,"sources":["utils/timeDescriptions.js","components/CityCard/index.jsx"],"names":["timeDescriptions","measurements","latestDatesList","map","measurement","moment","lastUpdated","time","details","duration","diff","data","years","concat","months","days","Math","floor","hours","e","timeDescription","max","CityCard","props","city","onClick","react_default","a","createElement","className","key","react_fontawesome_index_es","icon","faTimes","location","i","random","parameter","value","length"],"mappings":"+KAEeA,EAAA,SAASC,GACpB,IACI,IAAMC,EAAkBD,EAAaE,IAAI,SAACC,GACtC,OAAOC,IAAOD,EAAYE,eAK5B,OAQV,SAA0BC,GACtB,IACI,IAAMC,EAAUH,IAAOI,SAASJ,MAASK,KAAKH,IACxCI,EAAOH,EAAO,MACpB,OAAIG,EAAKC,MACL,WAAAC,OAAkBF,EAAKC,MAAvB,cAEAD,EAAKG,OACL,WAAAD,OAAkBF,EAAKG,OAAvB,eAEc,IAAdH,EAAKI,KACL,qBAEAJ,EAAKI,KAAO,EACZ,WAAAF,OAAkBG,KAAKC,MAAMN,EAAKI,KAAK,GAAvC,cAEc,IAAdJ,EAAKI,KACL,WAAAF,OAAkBF,EAAKI,KAAvB,YAEAJ,EAAKI,KAAO,GAAmB,IAAdJ,EAAKI,KACtB,WAAAF,OAAkBF,EAAKI,KAAvB,aAEe,IAAfJ,EAAKO,MACL,WAAAL,OAAkBF,EAAKO,MAAvB,aAEAP,EAAKO,MACL,WAAAL,OAAkBF,EAAKO,MAAvB,cAGG,KAGX,MAAOC,GACH,OAAO,MAzCEC,CAFYf,IAAOgB,IAAInB,IAKpC,MAAOiB,GACH,OAAO,cCwBAG,UA/BE,SAACC,GAAU,IAEjBC,EAAiBD,EAAjBC,KAAMC,EAAWF,EAAXE,QAEb,MAAO,CACHC,EAAAC,EAAAC,cAAA,UACIC,UAAU,kBACVJ,QAAS,WAAOA,EAAQD,EAAKA,OAC7BM,IAAI,UAEJJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAiBC,KAAMC,OAE3BP,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mCAAmCC,IAAI,eAC/CxB,EAAYkB,EAAKvB,eAEtByB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0CAA0CC,IAAI,SACvDN,EAAKU,UAEVR,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yCAAyCC,IAAI,QAA1D,MACQN,EAAKA,KADb,oBAGAE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCAAwCC,IAAI,gBAA3D,WACaN,EAAKvB,aAAaE,IAAI,SAACC,EAAa+B,GACzC,OACIT,EAAAC,EAAAC,cAAA,QAAME,IAAKd,KAAKoB,UAAhB,GAAAvB,OAA8BT,EAAYiC,UAA1C,MAAAxB,OAAwDT,EAAYkC,OAApEzB,OAA4EW,EAAKvB,aAAasC,OAAQ,IAAMJ,EAAI,GAAK,KAArH","file":"static/js/4.1dbd0530.chunk.js","sourcesContent":["import moment from 'moment';\n\nexport default function(measurements) {\n    try {\n        const latestDatesList = measurements.map((measurement) => {\n            return moment(measurement.lastUpdated);\n        })\n    \n        const latestMoment = moment.max(latestDatesList)\n    \n          return timeDescription(latestMoment);\n\n    }\n    catch (e) {\n        return null;\n    }\n};\n\nfunction timeDescription (time) {\n    try {\n        const details = moment.duration(moment().diff(time));\n        const data = details['_data']\n        if (data.years) {\n            return `Updated ${data.years} years ago`;\n        }\n        if (data.months) {\n            return `Updated ${data.months} months ago`;\n        }\n        if (data.days === 7) {\n            return `Updated a week ago`;\n        }\n        if (data.days > 7) {\n            return `Updated ${Math.floor(data.days/7)} weeks ago`;\n        }\n        if (data.days === 1) {\n            return `Updated ${data.days} day ago`;\n        }\n        if (data.days < 7 && data.days !== 0) {\n            return `Updated ${data.days} days ago`;\n        }\n        if (data.hours === 1) {\n            return `Updated ${data.hours} hour ago`;\n        }\n        if (data.hours) {\n            return `Updated ${data.hours} hours ago`;\n        }\n\n        return null;\n\n    }\n    catch (e){\n        return null;\n    }\n    \n}","import React from 'react';\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport lastUpdated from '../../utils/timeDescriptions';\nimport'./styles.css';\n\n\nconst CityCard = (props) => {\n\n    const {city, onClick} = props;\n\n    return [\n        <button\n            className='city-card-cross'\n            onClick={() => {onClick(city.city)} }\n            key='button'\n        >\n            <FontAwesomeIcon icon={faTimes} />\n        </button>,\n        <p className='city-card-updated city-card-item' key='lastUpdated'> \n            {lastUpdated(city.measurements)}\n        </p>,\n        <h2 className='city-card-location-title city-card-item' key='title'>\n            {city.location}\n        </h2>,\n        <p className='city-card-location-city city-card-item' key='city'> \n            In {city.city}, United Kingdom\n        </p>,\n        <div className='city-card-measurements city-card-item' key='measurements'> \n            Values: {city.measurements.map((measurement, i) => {\n                return(\n                    <span key={Math.random()}>{`${measurement.parameter}: ${measurement.value}${city.measurements.length -1 === i ? '' : ', '} `}</span>\n                )\n            })}\n        </div>\n    ]\n}\n\nexport default CityCard;"],"sourceRoot":""}