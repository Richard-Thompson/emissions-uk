{"version":3,"sources":["api/client.js","components/SearchPage/index.jsx","containers/SearchContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["client","getCities","_callee","regenerator_default","a","wrap","_context","prev","next","axios","get","then","result","catch","error","abrupt","sent","stop","getCity","_callee2","city","_context2","concat","CityCard","lazy","Promise","all","__webpack_require__","e","bind","SearchPage","_ref","cities","fetchCityCallback","cityList","onClick","notification","_useState","useState","_useState2","Object","slicedToArray","options","setOptions","useEffect","dropdownOptions","map","item","key","value","text","onChange","_ref2","asyncToGenerator","mark","event","selected","target","blur","_x","_x2","apply","this","arguments","react_default","createElement","className","Dropdown","icon","placeholder","fluid","search","inline","autoComplete","selectOnNavigation","selectOnBlur","upward","onFocus","blue","results","i","react","fallback","SearchContainer","state","setState","_useState3","_useState4","setCityList","_fetchedCities","api","data","fetchedCities","location","toConsumableArray","components_SearchPage","cityName","removedItemList","filter","hideVirtualKeyboard","App","containers_SearchContainer","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.32b6be55.chunk.js","sourcesContent":["import axios from 'axios';\n\nclass api {\n    getCities = async () => {\n        return await axios\n            .get('https://api.openaq.org/v1/cities?country=GB&limit=112')\n            .then((result) => {\n                return { result };\n            })\n            .catch((error) => {\n                return { error };\n            });\n    };\n\n    getCity = async (city)=> {\n        return await axios\n            .get(`https://api.openaq.org/v1/latest?city=${city}`)\n            .then((result) => {\n                return { result };\n            })\n            .catch((error) => {\n                return { error };\n            });\n    }\n}\n\nexport default new api();","import React, {useEffect, useState, Suspense, lazy} from 'react';\nimport { Dropdown } from 'semantic-ui-react';\n// import CityCard from '../CityCard';\nimport './styles.css';\nconst CityCard = lazy(() => import('../CityCard'));\n\nconst SearchPage = ({cities, fetchCityCallback, cityList, notification, onClick}) => {\n\n    const [options,setOptions] = useState({});\n\n    useEffect(()=> {\n        const dropdownOptions = cities && cities.map((item)=> {\n            return {key: item.city, value: item.city, text: item.city}\n        });\n\n        setOptions({dropdownOptions});\n    },[cities]);\n\n    const onChange = async (event, selected) => {\n        if (!selected.value) return;\n        event.target.blur();\n        await fetchCityCallback(selected.value);\n    }\n\n    const onFocus = (event) => {\n        event.target.blue();\n    }\n\n    return (\n        <div className='search-page container'>\n            <h1 className='search-page-title'>Compare your Air</h1>\n            <p className='search-page-description'>\n                Compare the air quality between cities in the uk. <br/>\n                Select cities to compare using the search tool below.\n            </p>\n            <div className='search-page-dropdown'>\n                <Dropdown\n                    icon='search'\n                    placeholder='Enter city name...'\n                    fluid\n                    search\n                    inline={true}\n                    autoComplete='on'\n                    selectOnNavigation={false}\n                    selectOnBlur={false}\n                    upward={false}\n                    options={options.dropdownOptions}\n                    onChange={onChange}\n                    onFocus={onFocus}\n                />\n            </div>\n            <div className='city-card-list'>\n                {cityList && cityList.results.map((city, i) => {\n                    return (\n                        <Suspense \n                            key={i} \n                            fallback={\n                            <div \n                                className='city-card-loading'>\n                                Loading...\n                            </div>\n                            }>\n                            <div className='city-card-container'>\n                                <CityCard\n                                    city={city}\n                                    onClick={onClick}\n                                />\n                            </div>\n                        </Suspense>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default SearchPage;","import React, {useState, useEffect} from 'react';\nimport hideVirtualKeyboard from 'hide-virtual-keyboard'\nimport api from '../api/client.js';\nimport SearchPage from '../components/SearchPage';\n\nconst SearchContainer = () => {\n    const [state, setState] = useState({cities:[]});\n    const [cityList, setCityList] = useState({results:[]});\n\n    useEffect(() => {\n        async function fetchedCities () {\n            const cities = await api.getCities();\n            setState({cities: cities.result.data.results});\n        }\n        fetchedCities();\n    },[]);\n    \n    const fetchCityCallback = async (city) => {\n        const location = await api.getCity(city);\n        setCityList({results: [location.result.data.results[0], ...cityList.results]})\n    }\n\n    const onClick = (cityName) => {\n        const removedItemList = cityList.results.filter((city) => {\n            return city.city !== cityName;\n        })\n       setCityList({results: [...removedItemList]})\n       hideVirtualKeyboard();\n    }\n\n    return (\n        <div className='search-page__container'>\n            <SearchPage\n                cities={state.cities}\n                fetchCityCallback={fetchCityCallback}\n                onClick={onClick}\n                cityList={cityList}\n            />\n        </div>                \n    );\n}\n\nexport default SearchContainer;","import React from 'react';\nimport SearchContainer from './containers/SearchContainer';\nimport './variables.css';\n\nfunction App() {\n  return <SearchContainer />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}