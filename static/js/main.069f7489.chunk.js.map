{"version":3,"sources":["api/client.js","utils/timeDescriptions.js","components/CityCard/index.jsx","components/SearchPage/index.jsx","containers/SearchContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["client","getCities","_callee","regenerator_default","a","wrap","_context","prev","next","axios","get","then","result","catch","error","abrupt","sent","stop","getCity","_callee2","city","_context2","concat","timeDescriptions","measurements","latestDatesList","map","measurement","moment","lastUpdated","time","details","duration","diff","data","console","log","years","months","days","Math","floor","hours","e","timeDescription","max","CityCard","_ref","onClick","react_default","createElement","className","react_fontawesome_index_es","icon","faTimes","location","i","parameter","value","length","SearchPage","cities","fetchCityCallback","cityList","notification","_useState","useState","_useState2","Object","slicedToArray","options","setOptions","useEffect","dropdownOptions","item","key","text","onChange","_ref2","asyncToGenerator","mark","event","selected","_x","_x2","apply","this","arguments","Dropdown","placeholder","fluid","search","inline","autoComplete","selectOnNavigation","selectOnBlur","upward","results","components_CityCard","SearchContainer","state","setState","_useState3","_useState4","setCityList","_fetchedCities","api","fetchedCities","toConsumableArray","_callee3","cityName","removedItemList","_context3","filter","components_SearchPage","App","containers_SearchContainer","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.069f7489.chunk.js","sourcesContent":["import axios from 'axios';\n\nclass api {\n    getCities = async () => {\n        return await axios\n            .get('https://api.openaq.org/v1/cities?country=GB&limit=112')\n            .then((result) => {\n                return { result };\n            })\n            .catch((error) => {\n                return { error };\n            });\n    };\n\n    getCity = async (city)=> {\n        return await axios\n            .get(`https://api.openaq.org/v1/latest?city=${city}`)\n            .then((result) => {\n                return { result };\n            })\n            .catch((error) => {\n                return { error };\n            });\n    }\n}\n\nexport default new api();","import moment from 'moment';\n\nexport default function(measurements) {\n    const latestDatesList = measurements.map((measurement) => {\n        return moment(measurement.lastUpdated);\n    })\n\n    const latestMoment = moment.max(latestDatesList)\n\n      return timeDescription(latestMoment);\n\n};\n\nfunction timeDescription (time) {\n    try {\n        const details = moment.duration(moment().diff(time));\n        const data = details['_data']\n        console.log(data);\n        if (data.years) {\n            return `Updated ${data.years} years ago`;\n        }\n        if (data.months) {\n            return `Updated ${data.months} months ago`;\n        }\n        if (data.days === 7) {\n            return `Updated a week ago`;\n        }\n        if (data.days > 7) {\n            return `Updated ${Math.floor(data.days/7)} weeks ago`;\n        }\n        if (data.days === 1) {\n            return `Updated ${data.days} day ago`;\n        }\n        if (data.days < 7 && data.days !== 0) {\n            return `Updated ${data.days} days ago`;\n        }\n        if (data.hours === 1) {\n            return `Updated ${data.hours} hour ago`;\n        }\n        if (data.hours) {\n            return `Updated ${data.hours} hours ago`;\n        }\n\n        return null;\n\n    }\n    catch (e){\n        return null;\n    }\n    \n}","import React from 'react';\nimport lastUpdated from '../../utils/timeDescriptions';\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport'./styles.css';\n\n\nconst CityCard = ({city, onClick}) => {\n    return[\n        <button\n            className='city-card-cross'\n            onClick={() => { console.log(city.city); onClick(city.city)} }\n        >\n            <FontAwesomeIcon icon={faTimes} />\n        </button>,\n        <p className='city-card-updated city-card-item'> {lastUpdated(city.measurements)}</p>,\n        <h2 className='city-card-location-title city-card-item'>{city.location}</h2>,\n        <p className='city-card-location-city city-card-item'> In {city.city}, United Kingdom</p>,\n        <p className='city-card-measurements city-card-item'> \n            Values: {city.measurements.map((measurement, i) => {\n                return(\n                    `${measurement.parameter}: ${measurement.value}${city.measurements.length -1 === i ? '' : ','} `\n                )\n            })}\n        </p>\n    ]\n}\n\nexport default CityCard;","import React, {useEffect, useState} from 'react';\nimport { Dropdown } from 'semantic-ui-react';\nimport CityCard from '../CityCard';\nimport './styles.css';\n\nconst SearchPage = ({cities, fetchCityCallback, cityList, notification, onClick}) => {\n\n    const [options,setOptions] = useState({});\n\n    useEffect(()=> {\n        const dropdownOptions = cities && cities.map((item)=> {\n            return {key: item.city, value: item.city, text: item.city}\n        });\n\n        setOptions({dropdownOptions});\n    },[cities]);\n\n    const onChange = async (event, selected) => {\n        if (!selected.value) return;\n        await fetchCityCallback(selected.value)\n    }\n\n    return (\n        <div className='search-page container'>\n            <h1 className='search-page-title'>Compare your Air</h1>\n            <p className='search-page-description'>\n                Compare the air quality between cities in the uk. <br/>\n                Select cities to compare using the search tool below.\n            </p>\n            <div className='search-page-dropdown'>\n                <Dropdown\n                    icon='search'\n                    placeholder='Enter city name...'\n                    fluid\n                    search\n                    inline={true}\n                    autoComplete='on'\n                    selectOnNavigation={false}\n                    selectOnBlur={false}\n                    upward={false}\n                    options={options.dropdownOptions}\n                    onChange={onChange}\n                />\n            </div>\n            <div className='city-card-list'>\n                {cityList && cityList.results.map((city, i) => {\n                    return (\n                        <div className='city-card-container' key={i}>\n                            <CityCard\n                                city={city}\n                                onClick={onClick}\n                            />\n                        </div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default SearchPage;","import React, {useState, useEffect} from 'react';\nimport api from '../api/client.js';\nimport SearchPage from '../components/SearchPage';\nimport './styles.css';\n\nconst SearchContainer = () => {\n    const [state, setState] = useState({cities:[]});\n    const [cityList, setCityList] = useState({results:[]});\n\n    useEffect(() => {\n        async function fetchedCities () {\n            const cities = await api.getCities();\n            setState({cities: cities.result.data.results});\n        }\n        fetchedCities();\n    },[]);\n    \n    const fetchCityCallback = async (city) => {\n        const location = await api.getCity(city);\n        await setCityList({results: [...cityList.results,location.result.data.results[0]]})\n    }\n\n    const onClick = async (cityName) => {\n        const removedItemList = cityList.results.filter ((city) => {\n            return city.city !== cityName;\n        })\n       setCityList({results: [...removedItemList]})\n    }\n\n    return (\n        <div className='search-page__container'>\n            <SearchPage\n                cities={state.cities}\n                fetchCityCallback={fetchCityCallback}\n                onClick={onClick}\n                cityList={cityList}\n            />\n        </div>                \n    );\n}\n\nexport default SearchContainer;","import React from 'react';\nimport SearchContainer from './containers/SearchContainer';\nimport './variables.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <SearchContainer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}